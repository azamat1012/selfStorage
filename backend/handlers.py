import os
from datetime import datetime
from backend.models import StorageUser, StorageBox, Delivery, Order
import telebot

from inline_keyboards import (
    create_consent_keyboard,
    create_my_order_keyboard,
    create_box_info_keyboards,
    create_available_boxes_keyboard,
    create_delivery_keyboard,
    create_confirm_keyboard,
    go_back
)
from standart_keyboards import (
    create_first_keyboard_user,
    create_second_keyboard_user,
    create_third_keyboard_user,
)


user_data = {}
current_dir = os.path.dirname(__file__)

def read_file(filename):
    with open(filename, 'r', encoding='utf-8') as file:
        return file.read()

def handle_start(bot: telebot.TeleBot):
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        with open('agreement.txt', 'rb') as file:
            bot.send_document(message.chat.id, file)
        bot.send_message(
            message.chat.id,
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ "
            "–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ—á—Ç–∏—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–Ω—è—Ç—å'.",
            reply_markup=create_consent_keyboard()
        )


def handle_callbacks(bot: telebot.TeleBot):

    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback(call):
        print("Telegram ID:", call.from_user.id)
        client = StorageUser.objects.filter(tg_id=call.from_user.id).first()
        chat_id = call.message.chat.id
        user_action = call.data
        user_address = call.message.chat.id
        if not client:
            client = StorageUser.objects.create(
                tg_id=call.from_user.id,
                name=call.from_user.first_name,
                number=None,
                role='customer'
            )

        if client:
            if user_action == 'accept':
                bot.send_message(
                    user_address,
                    "–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                    reply_markup=create_first_keyboard_user(client)
                )
                print(client)
            elif user_action == 'reject':
                bot.send_message(
                    user_address,
                    "–í—ã –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ."
                )
            elif user_action == 'info_about_box':
                bot.edit_message_reply_markup(
                    chat_id=user_address,
                    message_id=call.message.message_id,
                    reply_markup=create_box_info_keyboards()
                )
            elif user_action == 'box_name':
                try:
                    box = user_data[chat_id]['box_name']

                    bot.send_message(user_address,
                                     f'–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–æ–∫—Å–∞: {box}', reply_markup=go_back())
                except Exception as e:
                    bot.send_message(
                        user_address, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –±–æ–∫—Å üòì", reply_markup=go_back())

            elif user_action == "back":
                bot.edit_message_reply_markup(
                    chat_id=user_address,
                    message_id=call.message.message_id,
                    reply_markup=create_box_info_keyboards()
                )

            elif user_action == 'storage_period':
                bot.send_message(
                    user_address, "–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è: 30 –¥–Ω–µ–π", reply_markup=go_back())

            elif user_action.startswith('available_'):
                box_name = user_action.split("_", 1)[1]
                chosen_box = StorageBox.objects.filter(name=box_name).first()
                if chosen_box:
                    if chat_id not in user_data:
                        user_data[chat_id] = {}
                    user_data[chat_id]['box_name'] = chosen_box
                bot.send_message(user_address,
                                 f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {chosen_box.name}\n–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=create_delivery_keyboard())

            elif user_action.startswith('delivery_'):
                box_delivery = user_action.split('_', 1)[1]
                if box_delivery == "–∫—É—Ä—å–µ—Ä–æ–º":
                    if chat_id not in user_data:
                        user_data[chat_id] = {}
                    user_data[chat_id]['delivery_method'] = box_delivery
                    bot.send_message(
                        user_address, f"–û—Ç–ª–∏—á–Ω–æ, –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É: –∫—É—Ä—å–µ—Ä–æ–º\n–ß—Ç–æ –Ω–∞—Å—á–µ—Ç –í–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞?")
                    bot.register_next_step_handler(
                        call.message, process_address, bot)

                elif box_delivery == "—Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º":
                    if chat_id not in user_data:
                        user_data[chat_id] = {}
                    user_data[chat_id]['delivery_method'] = box_delivery
                    chosen_box = user_data[chat_id]['box_name']
                    user_data[chat_id]['client_address'] = chosen_box.location
                    bot.send_message(user_address, f"""–ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –±–æ–∫—Å–∞: {
                                     chosen_box.location}\n–ú—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!!\n\n–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:""")
                    bot.register_next_step_handler(
                        call.message, process_name, bot)
            elif user_action.startswith('confirm_'):
                response = user_action.split('_', 1)[1]
                if response == 'accept':
                    confirm_booking(call.message, bot)
                else:
                    bot.send_message(user_address, "–î—É–±–ª—å ‚Ññ2",
                                     reply_markup=create_first_keyboard_user())

        else:
            bot.send_message(call.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def process_address(message, bot):
    client_address = message.text
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {}
    user_data[message.chat.id]['client_address'] = client_address
    bot.send_message(message.chat.id, "–ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!\n–£–∫–∞–∂–∏—Ç–µ –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(message, process_name, bot)


def process_name(message, bot):
    client_name = message.text.strip()
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {}
    user_data[message.chat.id]['client_name'] = client_name

    bot.send_message(
        message.chat.id, "–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 2 —à–∞–≥–∞!!\n–£–∫–∞–∂–∏—Ç–µ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(message, confirm_request, bot)


def get_main_info_about_user(message):
    user_info = user_data.get(message.chat.id, {})
    client_name = user_info.get("client_name", "no")
    client_phone = user_info.get("client_phone", "no")
    client_box = user_info.get("box_name", "no")
    client_address = user_info.get("client_address", "no")
    return client_name, client_phone, client_box, client_address


def confirm_request(message, bot):
    client_phone = message.text.strip()
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {}
    user_data[message.chat.id]['client_phone'] = client_phone
    client_name, client_phone, client_box, client_address = get_main_info_about_user(
        message)
    bot.send_message(
        message.chat.id, "C—É–ø–µ—Ä!!\n–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ–±—Ä–∞—Ç—å –í–∞—à–∏ –≤–µ—â–∏ –∫ —Ö—Ä–∞–Ω–µ–Ω–∏—é —Ö—Ä–∞–Ω–µ–Ω—è—é",)

    bot.send_message(message.chat.id,
                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
                     f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name}\n"
                     f"–¢–µ–ª–µ—Ñ–æ–Ω: {client_phone}\n"
                     f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ–∫—Å: {client_box}\n"
                     f"–ê–¥—Ä–µ—Å: {client_address}\n",
                     reply_markup=create_confirm_keyboard())


def confirm_booking(message, bot):
    chat_id = message.chat.id

    if chat_id not in user_data:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    try:
        chosen_box = user_data[chat_id]['box_name']
        delivery_method = user_data[chat_id]['delivery_method']
        client_address = user_data[chat_id].get('client_address', '')
        user_name = user_data[chat_id].get(
            'name', message.from_user.first_name)

        # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä
        client = StorageUser.objects.get(tg_id=chat_id)
        order = Order.objects.create(
            user=client,
            box=chosen_box,
            status='pending',
            items_description=f"–ó–∞–∫–∞–∑ –Ω–∞ –±–æ–∫—Å {
                chosen_box.name} —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π {delivery_method}",
        )

        if delivery_method == 'delivery_–∫—É—Ä—å–µ—Ä–æ–º':
            Delivery.objects.create(
                order=order,
                pickup_address=client_address,
                contact_number=client.number,
                scheduled_at=datetime.now(),
                delivery_method=delivery_method,
            )

        bot.send_message(
            chat_id,
            f"–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üè∑Ô∏è\n"
            f"–ë–æ–∫—Å: {chosen_box.name}\n"
            f"–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery_method}\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.get_status_display()}",
            reply_markup=create_second_keyboard_user(client)
        )
        bot.send_photo(
            chat_id,
            photo=open(f"{current_dir}/qr_code.png", 'rb'),
            caption="–í–æ—Ç –≤–∞—à QR-–∫–æ–¥ üì∑"
        )
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")


def handle_messages(bot: telebot.TeleBot):
    @bot.message_handler(func=lambda message: True)
    def handler_message(message):
        client = StorageUser.objects.filter(tg_id=message.from_user.id).first()
        if not client:
            client = StorageUser.objects.create(
                tg_id=message.from_user.id,
                name=message.from_user.first_name,
                number=None,
                role='customer'
            )
        if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å –¥–ª—è –≤–µ—â–µ–π':
            bot.send_message(
                message.chat.id,
                '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å.',
                reply_markup=create_second_keyboard_user(client)
            )
        elif message.text == '–ü—Ä–∞–π—Å':
            bot.send_message(message.chat.id, read_file('price.txt'))
        elif message.text == '–ù–∞–∑–∞–¥':
            bot.send_message(
                message.chat.id,
                '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=create_first_keyboard_user(client)
            )
        elif message.text == '–ü—Ä–∞–≤–∏–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è':
            bot.send_message(message.chat.id, read_file('storage_rules.txt'))
        elif message.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                reply_markup=create_my_order_keyboard()
            )
        elif message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':

            boxes = StorageBox.objects.all()
            box_info = []
            for box in boxes:
                time_from = box.available_from.strftime("%d.%m.%Y")
                time_till = box.available_till.strftime("%d.%m.%Y")
                box_details = f"-----------–ë–æ–∫—Å: {box.name}-----------\n\n"

                box_details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {box.description}\n\n"
                box_details += f"–¶–µ–Ω–∞: {box.price} —Ä—É–±.\n\n"
                box_details += f"–ü–ª–æ—â–∞–¥—å: {box.volume}\n\n"
                box_details += f"""–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {
                    time_from} - {time_till} \n\n"""
                box_details += f"–ê–¥—Ä–µ—Å: {box.location} \n\n"
                box_info.append(box_details)

            box_info_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–∫—Å—ã:\n\n" + "\n".join(box_info)
            bot.send_message(message.chat.id, box_info_message)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–∫—Å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö',
                reply_markup=create_available_boxes_keyboard()
            )
