import os
from datetime import datetime, timedelta
from datetime import datetime
from backend.models import StorageUser, StorageBox, Delivery, Order
from django.utils.timezone import now
from django.utils.timezone import make_aware


from inline_keyboards import (
    create_consent_keyboard,
    create_my_order_keyboard,
    create_box_info_keyboards,
    create_available_boxes_keyboard,
    create_delivery_keyboard,
    create_confirm_keyboard,
    go_back,
    show_details_2,

)
from standart_keyboards import (
    create_first_keyboard_user,
    create_second_keyboard_user,
    delivery_keybaord
)

import telebot
from django.db.models import Count


user_data = {}
current_dir = os.path.dirname(__file__)


def read_file(filename):
    with open(filename, 'r', encoding='utf-8') as file:
        return file.read()


def handle_start(bot: telebot.TeleBot):
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        with open('agreement.txt', 'rb') as file:
            bot.send_document(message.chat.id, file)
        bot.send_message(
            message.chat.id,
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ "
            "–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ—á—Ç–∏—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–Ω—è—Ç—å'.",
            reply_markup=create_consent_keyboard()
        )


def handle_callbacks(bot: telebot.TeleBot):
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback(call):
        from_user = call.from_user
        chat_id = call.message.chat.id
        user_action = call.data
        client, created = StorageUser.objects.get_or_create(
            tg_id=from_user.id,
            defaults={
                'name': from_user.first_name,
                'number': None,
                'role': 'customer'
            }
        )
        active_order = Order.objects.filter(
            user=StorageUser.objects.get(tg_id=chat_id)).first()

        if not client:
            client = StorageUser.objects.create(
                tg_id=from_user.id,
                name=from_user.first_name,
                number=None,
                role='customer'
            )

        def send_message(text, markup=None):
            bot.send_message(chat_id, text, reply_markup=markup)

        def edit_message_reply_markup(markup=None):
            bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=markup
            )

        if client:
            if user_action == 'accept':
                send_message(
                    "–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                    create_first_keyboard_user(client)
                )
            elif user_action == 'reject':
                send_message(
                    "–í—ã –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ."
                )
            elif user_action == 'info_about_box':
                edit_message_reply_markup(create_box_info_keyboards())
            elif user_action == 'box_name':
                try:
                    storage_box = active_order.box
                    box = storage_box.name
                    if box:
                        send_message(
                            f'–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–æ–∫—Å–∞: {box}', go_back()
                        )
                except:
                    send_message(
                        "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –±–æ–∫—Å üòì", go_back()
                    )
            elif user_action == 'box_end':
                if active_order:
                    active_order.status = '–ó–∞–≤–µ—Ä—à–µ–Ω'
                    active_order.rental_end_date = now()
                    active_order.is_notified = True
                    active_order.save()
                    storage_box = active_order.box
                    storage_box.available_from = now()
                    storage_box.save()
                    bot.send_photo(
                        chat_id,
                        photo=open(f"{current_dir}/qr_code.png", 'rb'),
                        caption=f"""–¢–∞–∫ –±—ã—Å—Ç—Ä–æ ??? –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –±–æ–∫—Å '{
                            storage_box.name}' –∑–∞–≤–µ—Ä—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –ø–æ QR-–∫–æ–¥—É"""
                    )
                else:
                    send_message("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", go_back())

            elif user_action == 'back':
                edit_message_reply_markup(create_box_info_keyboards())
            elif user_action == 'storage_period':
                try:
                    date_till = active_order.rental_end_date
                    rental_period = datetime.fromisoformat(
                        str(active_order.rental_end_date)).strftime("%Y-%m-%d")

                    send_message(
                        f"–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è:–¥–æ {rental_period}", go_back()
                    )
                except:
                    send_message(
                        f"–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è:–¥–æ 30 –¥–Ω–µ–π", go_back()
                    )
            elif user_action.startswith('available_'):
                box_name = user_action.split("_", 1)[1]
                chosen_box = StorageBox.objects.filter(name=box_name).first()
                if chosen_box:
                    user_data.setdefault(chat_id, {})['box_name'] = chosen_box
                    send_message(
                        f"""–í—ã –≤—ã–±—Ä–∞–ª–∏ {
                            chosen_box.name}\n–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –í–∞–º –Ω—É–∂–Ω–∞ –∞—Ä–µ–Ω–¥–∞?""",
                    )
                    bot.register_next_step_handler(
                        call.message, process_date, bot)
            elif user_action.startswith('delivery_'):
                box_delivery = user_action.split('_', 1)[1]
                user_data.setdefault(chat_id, {})[
                    'delivery_method'] = box_delivery
                if box_delivery == "–∫—É—Ä—å–µ—Ä–æ–º":
                    send_message(
                        "–û—Ç–ª–∏—á–Ω–æ, –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É: –∫—É—Ä—å–µ—Ä–æ–º\n–ß—Ç–æ –Ω–∞—Å—á–µ—Ç –í–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞?"
                    )
                    bot.register_next_step_handler(
                        call.message, process_address, bot
                    )
                elif box_delivery == "—Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º":
                    chosen_box = user_data[chat_id]['box_name']
                    user_data[chat_id]['client_address'] = chosen_box.location
                    send_message(
                        f"""–ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –±–æ–∫—Å–∞: {
                            chosen_box.location}\n–ú—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!!\n\n–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"""
                    )
                    bot.register_next_step_handler(
                        call.message, process_name, bot
                    )
            elif user_action.startswith('confirm_'):
                response = user_action.split('_', 1)[1]
                if response == 'accept':
                    confirm_booking(call.message, bot)
                else:
                    send_message(
                        "–î—É–±–ª—å ‚Ññ2", create_first_keyboard_user(client)
                    )
            elif user_action == 'all_orders':
                boxes = client.property.all()
                orders = Order.objects.filter(
                    box__in=boxes).select_related('user', 'box')
                order_details = []

                for order in orders:
                    created_at_str = (
                        datetime.fromisoformat(
                            str(order.created_at)).strftime('%d.%m.%Y %H:%M')
                        if order.created_at else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    )

                    rental_end_date_str = (
                        order.rental_end_date.strftime('%d.%m.%Y %H:%M')
                        if order.rental_end_date else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    )

                    order_details.append(
                        f"–ó–∞–∫–∞–∑ #{order.id}:\n"
                        f"–ö–ª–∏–µ–Ω—Ç: {order.user.name} (ID: {order.user.tg_id})\n"
                        f"–°–∫–ª–∞–¥: {order.box.name}\n"
                        f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–µ—â–µ–π: {order.items_description}\n"
                        f"–°–æ–∑–¥–∞–Ω: {created_at_str}\n"
                        f"–°—Ä–æ–∫: –¥–æ {rental_end_date_str}\n"
                        "-----------------------------------"
                    )
                details_message = "\n\n".join(order_details)
                send_message(details_message)
            elif user_action == 'end_orders':
                boxes = client.property.all()
                orders = Order.objects.filter(
                    box__in=boxes,
                    status="–ó–∞–¥–µ—Ä–∂–∫–∞"
                ).select_related('user', 'box')

                if orders.exists():
                    order_details = []
                    for order in orders:
                        order_details.append(
                            f"–ó–∞–∫–∞–∑ #{order.id}:\n"
                            f"""–ö–ª–∏–µ–Ω—Ç: {order.user.name} (ID: {
                                order.user.tg_id})\n"""
                            f"–°–∫–ª–∞–¥: {order.box.name}\n"
                            f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                            f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–µ—â–µ–π: {order.items_description}\n"
                            f"""–ó–∞–∫–æ–Ω—á–∏–ª—Å—è: {
                                order.rental_end_date.strftime('%d.%m.%Y %H:%M')}\n"""
                            f"""–î–æ—Å—Ç—É–ø–µ–Ω —Å: {
                                order.box.available_from.strftime('%d.%m.%Y %H:%M')}\n"""
                            "-----------------------------------"
                        )
                    send_message("\n\n".join(order_details))
                else:
                    send_message("–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")

        else:
            send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def handle_messages(bot: telebot.TeleBot):
    @bot.message_handler(func=lambda message: True)
    def handler_message(message):
        client = StorageUser.objects.filter(tg_id=message.from_user.id).first()
        if not client:
            client = StorageUser.objects.create(
                tg_id=message.from_user.id,
                name=message.from_user.first_name,
                number=None,
                role='customer'
            )
        if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å –¥–ª—è –≤–µ—â–µ–π':
            bot.send_message(
                message.chat.id,
                '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å.',
                reply_markup=create_second_keyboard_user(client)
            )
        elif message.text == '–ü—Ä–∞–π—Å':
            bot.send_message(message.chat.id, read_file('price.txt'))
        elif message.text == '–ù–∞–∑–∞–¥':
            bot.send_message(
                message.chat.id,
                '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=create_first_keyboard_user(client)
            )
        elif message.text == '–ü—Ä–∞–≤–∏–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è':
            bot.send_message(message.chat.id, read_file('storage_rules.txt'))
        elif message.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                reply_markup=create_my_order_keyboard()
            )
        elif message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
            boxes = StorageBox.objects.all()
            if boxes:
                box_info = []
                for box in boxes:
                    time_from = box.available_from.strftime("%d.%m.%Y")
                    time_till = box.available_till.strftime("%d.%m.%Y")
                    box_details = f"–ë–æ–∫—Å: {box.name}\n\n"
    
                    box_details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {box.description}\n\n"
                    box_details += f"–¶–µ–Ω–∞: {box.price} —Ä—É–±.\n\n"
                    box_details += f"–ü–ª–æ—â–∞–¥—å: {box.volume}\n\n"
                    box_details += f"""–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {
                        time_from} - {time_till} \n\n"""
                    box_details += f"–ê–¥—Ä–µ—Å: {box.location} \n\n"
                    box_info.append(box_details)
    
                box_info_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–∫—Å—ã:\n\n" + "\n".join(box_info)
                bot.send_message(message.chat.id, box_info_message)
                bot.send_message(
                    message.chat.id,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–∫—Å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö',
                    reply_markup=create_available_boxes_keyboard()
                )
            else:
                bot.send_message(
                    message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–∫—Å–æ–≤ –Ω–µ—Ç.")

        elif message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã":
            boxes = client.property.all()
            orders = Order.objects.filter(
                box__in=boxes).select_related('user', 'box')
            if orders.exists():
                total_orders = orders.count()
                bot.send_message(
                    message.chat.id,
                    f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–∞—à–∏—Ö —Å–∫–ª–∞–¥–æ–≤: {total_orders}", reply_markup=show_details_2()
                )
        elif message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–∫—Å–∞–º–∏":
            boxes = client.property.all()
            if boxes.exists():
                box_list = "\n".join(
                    [f"{box.name} (ID: {box.id})" for box in boxes])
                bot.send_message(message.chat.id, f"""–í–∞—à–∏ –±–æ–∫—Å—ã:\n{
                                 box_list}""", reply_markup=delivery_keybaord())
            else:
                bot.send_message(
                    message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–∫—Å–æ–≤.", reply_markup=delivery_keybaord())

        elif message.text.startswith("–î–æ—Å—Ç–∞–≤–∫–∞ –ó–∞–∫–∞–∑–∞"):
            print(f"Client tg_id: {client}")
            deliveries = Delivery.objects.filter(
                order__box__owners__tg_id=client.tg_id
            ).select_related('order__user', 'order__box')
            print(f"Queryset count: {deliveries.count()}")
            if deliveries.exists():
                all_deliveries = "\n\n".join(
                    [
                        f"–ó–∞–∫–∞–∑ ID: {delivery.order.id}\n"
                        f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery.pickup_address}\n"
                        f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {delivery.contact_number}\n"
                        f"""–ù–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {
                            delivery.scheduled_at.strftime('%d.%m.%Y %H:%M')}"""
                        for delivery in deliveries
                    ]
                )

                bot.send_message(
                    message.chat.id,
                    f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n{all_deliveries}\n\n"
                )
            else:
                bot.send_message(
                    message.chat.id, "–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–º—É –±–æ–∫—Å—É."
                )


def process_delivery(message, bot):
    try:
        order_id = int(message.text.strip())
        delivery = Delivery.objects.filter(
            order__id=order_id,
            order__box__owners__tg_id=message.chat.id
        ).select_related('order__user', 'order__box').first()

        if delivery:
            pickup_address = delivery.pickup_address
            contact_number = delivery.contact_number
            scheduled_date = delivery.scheduled_at.strftime("%d.%m.%Y %H:%M")

            bot.send_message(
                message.chat.id,
                f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{delivery.order.id}\n"
                f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_address}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {contact_number}\n"
                f"–ù–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {scheduled_date}"
            )
        else:
            bot.send_message(
                message.chat.id,
                "–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–∫–∞–∑ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —É–∫–∞–∑–∞–≤ ID –∑–∞–∫–∞–∑–∞."
            )
            bot.register_next_step_handler(message, process_delivery, bot)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ (—á–∏—Å–ª–æ)."
        )
        bot.register_next_step_handler(message, process_delivery, bot)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


def process_date(message, bot):
    chat_id = message.chat.id
    user_input = message.text.strip()

    try:
        rental_days = int(user_input)
        if rental_days <= 0:
            bot.send_message(
                chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
            bot.register_next_step_handler(message, process_date, bot)
            return
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        bot.register_next_step_handler(message, process_date, bot)
        return

    chosen_box = user_data.get(chat_id, {}).get('box_name')
    if not chosen_box:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–∫—Å –∑–∞–Ω–æ–≤–æ.")
        return

    now = make_aware(datetime.now())
    rental_end_date = now + timedelta(days=rental_days)

    if rental_end_date > chosen_box.available_till:
        bot.send_message(
            chat_id,
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ–∫—Å–∞. "
            f"""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {(
                chosen_box.available_till - now).days} –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫."""
        )
        bot.register_next_step_handler(message, process_date, bot)
        return

    user_data[chat_id]['rental_date'] = rental_end_date
    bot.send_message(
        chat_id,
        f"{rental_days} —Ç–∞–∫ {rental_days}!\n–ß—Ç–æ –Ω–∞—Å—á–µ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏?",
        reply_markup=create_delivery_keyboard()
    )


def process_user_input(message, bot, next_step_handler, key, prompt):
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {}
    user_data[message.chat.id][key] = message.text.strip()
    bot.send_message(message.chat.id, prompt)
    bot.register_next_step_handler(message, next_step_handler, bot)


def process_address(message, bot):
    process_user_input(message, bot, process_name, 'client_address',
                       "–ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!\n–£–∫–∞–∂–∏—Ç–µ –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")


def process_name(message, bot):
    process_user_input(message, bot, confirm_request, 'client_name',
                       "–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 2 —à–∞–≥–∞!!\n–£–∫–∞–∂–∏—Ç–µ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")


def get_main_info_about_user(message):
    user_info = user_data.get(message.chat.id, {})
    client_name = user_info.get("client_name", "no")
    client_phone = user_info.get("client_phone", "no")
    client_box = user_info.get("box_name", "no")
    client_address = user_info.get("client_address", "no")
    client_date = user_info.get('rental_date', 'no')
    return client_name, client_phone, client_box, client_address, client_date


def confirm_request(message, bot):
    client_phone = message.text.strip()
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {}
    user_data[message.chat.id]['client_phone'] = client_phone
    client = StorageUser.objects.filter(tg_id=message.chat.id).first()

    if client:
        client.number = client_phone
        client.rental_period = user_data[message.chat.id].get('rental_date')
        client.save()

    client_name, client_phone, client_box, client_address, client_date = get_main_info_about_user(
        message)

    formatted_date = datetime.fromisoformat(
        str(client_date)).strftime("%Y-%m-%d")
    bot.send_message(
        message.chat.id,
        "C—É–ø–µ—Ä!!\n–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ–±—Ä–∞—Ç—å –í–∞—à–∏ –≤–µ—â–∏ –∫ —Ö—Ä–∞–Ω–µ–Ω–∏—é!",
    )
    bot.send_message(
        message.chat.id,
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ–∫—Å: {client_box}\n"
        f"–ü–µ—Ä–∏–æ–¥: –¥–æ {formatted_date}\n"
        f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {client_phone}\n"
        f"–ê–¥—Ä–µ—Å: {client_address}\n",
        reply_markup=create_confirm_keyboard(),
    )


def finish_rent(message, bot):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    chosen_box = user_data.get(chat_id, {}).get('box_name')
    order = Order.objects.filter(
        rental_end_date__isnull=False, is_notified=False, user=user_name)
    order.rental_end_date = chosen_box.available_till
    order.is_notified = True
    order.save()
    bot.send_photo(
        order.user.tg_id,
        photo=open(f"{current_dir}/qr_code.png", 'rb'),
        caption=f"""–ü—Ä–∏–≤–µ—Ç, {
            order.user.name}!\n–í—Ä–µ–º—è —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ –ª–µ—Ç–∏—Ç((\n –°—Ä–æ–∫ —Ç–≤–æ–µ–π –∞—Ä–µ–Ω–¥—ã —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è\n–í–æ—Ç QR-–∫–æ–¥, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–∏ –≤–µ—â–∏ üòì üì∑\n\nPS.–ú—ã –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å!"""
    )


def confirm_booking(message, bot):
    chat_id = message.chat.id

    if chat_id not in user_data:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    try:
        chosen_box = user_data[chat_id]['box_name']
        delivery_method = user_data[chat_id]['delivery_method']
        client_address = user_data[chat_id].get('client_address', '')
        rental_date = user_data[chat_id].get('rental_date', '')
        user_name = user_data[chat_id].get(
            'name', message.from_user.first_name)

        # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä
        client = StorageUser.objects.get(tg_id=chat_id)
        order = Order.objects.create(
            user=client,
            box=chosen_box,
            status='–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
            items_description=f"""–ó–∞–∫–∞–∑ –æ—Ç <<{user_data[chat_id]['client_name']}>> –Ω–∞ –±–æ–∫—Å <<{
                chosen_box.name}>> —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π <<{delivery_method}>> –ø–æ –∞–¥—Ä–µ—Å—É <<{client_address}>>""",
            rental_end_date=rental_date
        )

        if delivery_method == '–∫—É—Ä—å–µ—Ä–æ–º':
            Delivery.objects.create(
                order=order,
                pickup_address=client_address,
                contact_number=client.number,
                scheduled_at=datetime.now(),
            )

        bot.send_message(
            chat_id,
            f"–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üè∑Ô∏è\n"
            f"–ë–æ–∫—Å: {chosen_box.name}\n"
            f"–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery_method}\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.get_status_display()}",
            reply_markup=create_second_keyboard_user(client)
        )
        bot.send_photo(
            chat_id,
            photo=open(f"{current_dir}/qr_code.png", 'rb'),
            caption="""–í–æ—Ç –≤–∞—à QR-–∫–æ–¥ üì∑\n–û–Ω –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –í–∞—à—É —è—á–µ–π–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π\n\n–ö–∞–∫ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –ø–æ–¥–æ–π–¥–µ—Ç –∫ –∫–æ–Ω—Ü—É, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥—Ä—É–≥–æ–π QR-–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞. \n–£–¥–∞—á–∏!)"""
        )
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
